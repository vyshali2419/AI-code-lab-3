{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vyshali2419/AI-code-lab-3/blob/main/ass_11\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PXHXzAo3TVMI"
      },
      "outputs": [],
      "source": [
        "task:1 Ask AI to implement a stack class with push(), pop(), peek() and\n",
        "is_empty() methods"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "prompt:give me a python code to implement a stack class with push(), pop(), peek() and is_empty() methods"
      ],
      "metadata": {
        "id": "asGq3IqobKaP"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3d631178",
        "outputId": "68b1921f-8ba1-4d3d-ac0f-aa4165b5d640"
      },
      "source": [
        "class Stack:\n",
        "    def __init__(self):\n",
        "        self.items = []\n",
        "\n",
        "    def is_empty(self):\n",
        "        return not self.items\n",
        "\n",
        "    def push(self, item):\n",
        "        self.items.append(item)\n",
        "\n",
        "    def pop(self):\n",
        "        if not self.is_empty():\n",
        "            return self.items.pop()\n",
        "        else:\n",
        "            return \"Stack is empty\"\n",
        "\n",
        "    def peek(self):\n",
        "        if not self.is_empty():\n",
        "            return self.items[-1]\n",
        "        else:\n",
        "            return \"Stack is empty\"\n",
        "\n",
        "# Example usage:\n",
        "stack = Stack()\n",
        "print(stack.is_empty())\n",
        "stack.push(10)\n",
        "stack.push(20)\n",
        "stack.push(30)\n",
        "print(stack.peek())\n",
        "print(stack.pop())\n",
        "print(stack.pop())\n",
        "print(stack.peek())\n",
        "print(stack.is_empty())\n",
        "print(stack.pop())\n",
        "print(stack.pop())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "30\n",
            "30\n",
            "20\n",
            "10\n",
            "False\n",
            "10\n",
            "Stack is empty\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "explanation:class Stack:: This line defines a new class named Stack. In object-oriented programming, a class is a blueprint for creating objects (instances of the class).\n",
        "def __init__(self):: This is the constructor method of the class. It's called automatically when you create a new Stack object.\n",
        "self.items = []: This line initializes an empty list called items within the Stack object. This list will be used to store the elements of the stack. Stacks are typically implemented using lists or arrays because they allow efficient adding and removing of elements from one end.\n",
        "def is_empty(self):: This method checks if the stack is empty.\n",
        "return not self.items: It returns True if the items list is empty (meaning the stack has no elements), and False otherwise. The not operator inverts the boolean value of the list (an empty list is considered False in a boolean context, so not False is True).\n",
        "def push(self, item):: This method adds (pushes) an element to the top of the stack.\n",
        "self.items.append(item): The append() method of the list adds the item to the end of the items list. In a stack implementation using a list, the end of the list represents the top of the stack.\n",
        "def pop(self):: This method removes and returns the element from the top of the stack.\n",
        "if not self.is_empty():: It first checks if the stack is not empty using the is_empty() method. You cannot pop from an empty stack.\n",
        "return self.items.pop(): If the stack is not empty, self.items.pop() removes and returns the last element from the items list. This is the element at the top of the stack.\n",
        "else: return \"Stack is empty\": If the stack is empty, it returns the string \"Stack is empty\" to indicate that the pop operation could not be performed.\n",
        "def peek(self):: This method returns the element at the top of the stack without removing it.\n",
        "if not self.is_empty():: It also checks if the stack is not empty.\n",
        "return self.items[-1]: If the stack is not empty, self.items[-1] accesses the last element of the items list (which is the top of the stack) using negative indexing.\n",
        "else: return \"Stack is empty\": If the stack is empty, it returns the string \"Stack is empty\".\n"
      ],
      "metadata": {
        "id": "KWZkHc_GcPul"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "task2: Use AI to generate a Queue class with enqueue(), dequeue(), and\n",
        "is_empty()."
      ],
      "metadata": {
        "id": "miFaoPuVcYGP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "prompt: give me a python code that generates generate a Queue class with enqueue(), dequeue(), and is_empty()."
      ],
      "metadata": {
        "id": "mdZcQLhLceGp"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "de716b56",
        "outputId": "4a040b83-ba9c-40c5-9c12-b9cd0b38b589"
      },
      "source": [
        "class Queue:\n",
        "    def __init__(self):\n",
        "        self.items = []\n",
        "\n",
        "    def is_empty(self):\n",
        "        return not self.items\n",
        "\n",
        "    def enqueue(self, item):\n",
        "        self.items.append(item)\n",
        "\n",
        "    def dequeue(self):\n",
        "        if not self.is_empty():\n",
        "            return self.items.pop(0)\n",
        "        else:\n",
        "            return \"Queue is empty\"\n",
        "\n",
        "# Example usage:\n",
        "queue = Queue()\n",
        "print(queue.is_empty())\n",
        "queue.enqueue(10)\n",
        "queue.enqueue(20)\n",
        "queue.enqueue(30)\n",
        "print(queue.dequeue())\n",
        "print(queue.dequeue())\n",
        "print(queue.is_empty())\n",
        "print(queue.dequeue())\n",
        "print(queue.dequeue())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "10\n",
            "20\n",
            "False\n",
            "30\n",
            "Queue is empty\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "explanation: class Queue:: This line defines a new class named Queue. Similar to the Stack class, this is a blueprint for creating queue objects.\n",
        "def __init__(self):: This is the constructor method.\n",
        "self.items = []: Initializes an empty list called items to store the elements of the queue.\n",
        "def is_empty(self):: This method checks if the queue is empty.\n",
        "return not self.items: Returns True if the items list is empty, and False otherwise.\n",
        "def enqueue(self, item):: This method adds (enqueues) an element to the rear of the queue.\n",
        "self.items.append(item): The append() method adds the item to the end of the items list. In this queue implementation using a list, the end of the list represents the rear of the queue.\n",
        "def dequeue(self):: This method removes and returns the element from the front of the queue.\n",
        "if not self.is_empty():: It first checks if the queue is not empty. You cannot dequeue from an empty queue.\n",
        "return self.items.pop(0): If the queue is not empty, self.items.pop(0) removes and returns the element at index 0 from the items list. In this queue implementation, index 0 represents the front of the queue. This operation has a time complexity of O(n) because all subsequent elements need to be shifted. For more efficient queue implementations, especially for large queues, other data structures like collections.deque are preferred.\n",
        "else: return \"Queue is empty\": If the queue is empty, it returns the string \"Queue is empty\"."
      ],
      "metadata": {
        "id": "JNMEQ1iDc0-s"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "task3:Ask AI to create a singly linked list with insert_at_end(),\n",
        "insert_at_beginning(), and display()."
      ],
      "metadata": {
        "id": "HF_zcPnwc_Qh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "prompt:give me a python program that create insert_at_beginning(), and display()."
      ],
      "metadata": {
        "id": "2c6xgO0SdGry"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0d42badf",
        "outputId": "45c660fb-1b39-49ca-9510-3bef557dc8fe"
      },
      "source": [
        "class Node:\n",
        "    def __init__(self, data):\n",
        "        self.data = data\n",
        "        self.next = None\n",
        "\n",
        "class LinkedList:\n",
        "    def __init__(self):\n",
        "        self.head = None\n",
        "\n",
        "    def insert_at_beginning(self, data):\n",
        "        new_node = Node(data)\n",
        "        new_node.next = self.head\n",
        "        self.head = new_node\n",
        "\n",
        "    def display(self):\n",
        "        current = self.head\n",
        "        while current:\n",
        "            print(current.data, end=\" -> \")\n",
        "            current = current.next\n",
        "        print(\"None\")\n",
        "\n",
        "# Example Usage:\n",
        "llist = LinkedList()\n",
        "llist.insert_at_beginning(30)\n",
        "llist.insert_at_beginning(20)\n",
        "llist.insert_at_beginning(10)\n",
        "llist.display()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 -> 20 -> 30 -> None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "explanation:class Node:: This class represents a single node within the linked list.\n",
        "def __init__(self, data):: The constructor for a Node. It takes data as an argument and stores it in self.data. It also initializes self.next to None, which means this node doesn't point to another node yet.\n",
        "class LinkedList:: This class represents the entire singly linked list.\n",
        "def __init__(self):: The constructor for the LinkedList. It initializes self.head to None. The head is a reference to the first node in the list. Initially, the list is empty, so head is None.\n",
        "def insert_at_beginning(self, data):: This method adds a new node with the given data at the beginning of the linked list.\n",
        "new_node = Node(data): A new Node object is created with the provided data.\n",
        "new_node.next = self.head: The next pointer of the new_node is set to the current head of the list. This makes the new node point to the node that was previously the first node.\n",
        "self.head = new_node: The head of the list is updated to point to the new_node. This makes the new node the new first node in the list.\n",
        "def display(self):: This method traverses the linked list and prints the data of each node.\n",
        "current = self.head: A temporary variable current is initialized to the head of the list. This variable will be used to iterate through the list.\n",
        "while current:: The loop continues as long as current is not None. This means it will visit every node until the end of the list.\n",
        "print(current.data, end=\" -> \"): The data of the current node is printed. end=\" -> \" is used to print \" -> \" after each data element instead of a newline, keeping the output on a single line.\n",
        "current = current.next: current is updated to point to the next node in the list.\n",
        "print(\"None\"): After the loop finishes (meaning current is None), \"None\" is printed to indicate the end of the linked list.\n"
      ],
      "metadata": {
        "id": "upVLbeg2ev8x"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "task4:Ask AI to generate a simple BST with insert() and inorder_traversal().\n"
      ],
      "metadata": {
        "id": "1M4xIKfbdsve"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "prompt: give me a python code that generate a simple BST with insert() and inorder_traversal()."
      ],
      "metadata": {
        "id": "OgnyscpEd6qH"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "MFQuTy9reNMz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5e4577a2",
        "outputId": "ee380004-9c60-462a-d111-46113f21cb56"
      },
      "source": [
        "class Node:\n",
        "    def __init__(self, key):\n",
        "        self.left = None\n",
        "        self.right = None\n",
        "        self.val = key\n",
        "\n",
        "class BST:\n",
        "    def __init__(self):\n",
        "        self.root = None\n",
        "\n",
        "    def insert(self, key):\n",
        "        if self.root is None:\n",
        "            self.root = Node(key)\n",
        "        else:\n",
        "            self._insert_recursive(self.root, key)\n",
        "\n",
        "    def _insert_recursive(self, root, key):\n",
        "        if key < root.val:\n",
        "            if root.left is None:\n",
        "                root.left = Node(key)\n",
        "            else:\n",
        "                self._insert_recursive(root.left, key)\n",
        "        else:\n",
        "            if root.right is None:\n",
        "                root.right = Node(key)\n",
        "            else:\n",
        "                self._insert_recursive(root.right, key)\n",
        "\n",
        "    def inorder_traversal(self):\n",
        "        result = []\n",
        "        self._inorder_recursive(self.root, result)\n",
        "        return result\n",
        "\n",
        "    def _inorder_recursive(self, root, result):\n",
        "        if root:\n",
        "            self._inorder_recursive(root.left, result)\n",
        "            result.append(root.val)\n",
        "            self._inorder_recursive(root.right, result)\n",
        "\n",
        "# Example Usage:\n",
        "bst = BST()\n",
        "bst.insert(50)\n",
        "bst.insert(30)\n",
        "bst.insert(20)\n",
        "bst.insert(40)\n",
        "bst.insert(70)\n",
        "bst.insert(60)\n",
        "bst.insert(80)\n",
        "\n",
        "print(\"Inorder traversal of the BST:\")\n",
        "print(bst.inorder_traversal())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inorder traversal of the BST:\n",
            "[20, 30, 40, 50, 60, 70, 80]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "explanation:class Node:: This class represents a node in the BST.\n",
        "def __init__(self, key):: The constructor initializes a node with a key (the value stored in the node). It also initializes left and right attributes to None, which will point to the left and right children of the node, respectively.\n",
        "class BST:: This class represents the Binary Search Tree itself.\n",
        "def __init__(self):: The constructor initializes the BST with a root attribute set to None, indicating an empty tree initially.\n",
        "def insert(self, key):: This method is the public interface for inserting a new key into the BST.\n",
        "if self.root is None:: If the tree is empty, the new node becomes the root.\n",
        "else: self._insert_recursive(self.root, key): If the tree is not empty, it calls a private helper method _insert_recursive to find the correct position for the new key.\n",
        "def _insert_recursive(self, root, key):: This is a recursive helper method for inserting a key.\n",
        "if key < root.val:: If the key is less than the current node's value, it should be inserted in the left subtree.\n",
        "if root.left is None:: If the left child is None, the new node is placed here.\n",
        "else: self._insert_recursive(root.left, key): Otherwise, recursively call _insert_recursive on the left child.\n",
        "else:: If the key is greater than or equal to the current node's value, it should be inserted in the right subtree.\n",
        "if root.right is None:: If the right child is None, the new node is placed here.\n",
        "else: self._insert_recursive(root.right, key): Otherwise, recursively call _insert_recursive on the right child.\n",
        "def inorder_traversal(self):: This method initiates the in-order traversal of the BST. In-order traversal visits nodes in ascending order of their keys.\n",
        "result = []: Initializes an empty list to store the traversal result.\n",
        "self._inorder_recursive(self.root, result): Calls the private recursive helper method _inorder_recursive starting from the root.\n",
        "return result: Returns the list containing the in-order traversal of the tree.\n",
        "def _inorder_recursive(self, root, result):: This is a recursive helper method for performing in-order traversal.\n",
        "if root:: If the current node is not None:\n",
        "self._inorder_recursive(root.left, result): Recursively traverse the left subtree.\n",
        "result.append(root.val): Visit the current node (append its value to the result list).\n",
        "self._inorder_recursive(root.right, result"
      ],
      "metadata": {
        "id": "MhvbSkaReTQD"
      }
    }
  ]
}